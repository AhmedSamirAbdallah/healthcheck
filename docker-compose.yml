version: '3.8'

services:
  mongodb:
    image: mongo:latest
    container_name: mongo-db
    ports:
      - "27017:27017"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=admin
      - MONGO_INITDB_ROOT_PASSWORD=adminpassword
      - MONGO_INITDB_DATABASE=healthcheck
    networks:
      - mongo-network

  zookeeper:
    image: zookeeper:3.5
    container_name: zookeeper
    ports:
      - "2181:2181"
    networks:
      - kafka-network

  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    depends_on:
      - zookeeper
    networks:
      - kafka-network

  redis:
    image: redis:latest
    container_name: redis
    ports:
      - "6379:6379"
    environment:
      - REDIS_PASSWORD=admin  # Set the password here
    command: ["redis-server", "--requirepass", "admin"]  # Enforce password authentication
    networks:
      - redis-network

    # Adding Redis UI - Redis Commander
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: redis-commander
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=admin  # Pass the password here too
    ports:
      - "8081:8081"  # Redis Commander UI will be available at localhost:8081
    depends_on:
      - redis
    networks:
      - redis-network

  # Adding Apache Kafka UI (Kafka UI)
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    ports:
      - "8080:8080"  # Kafka UI will be available at localhost:8080
    environment:
      KAFKA_CLUSTERS_0_NAME: "local"  # Kafka cluster name
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: "kafka:9092"  # Point to the Kafka broker
    depends_on:
      - kafka
    networks:
      - kafka-network

  # Adding Temporal service
  temporal:
    image: temporalio/server:1.22.1
    container_name: temporal
    environment:
      - TEMPD_DB=postgresql
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_USER=admin
      - POSTGRES_PASSWORD=admin
      - POSTGRES_DB=temporal
      - ELASTICSEARCH_URL=http://elasticsearch:9200  # Elasticsearch URL
      - TEMPORAL_ADDRESS=temporal:7233  # Explicitly set the Temporal address
      - VISIBILITY_STORE=elasticsearch  # Use Elasticsearch for visibility instead of Cassandra
      - ES_NUM_SHARDS=5  # Number of Elasticsearch shards for Temporal visibility store (adjust as needed)
    volumes:
      - ./docker.yaml:/etc/temporal/docker.yaml  # Mount the docker.yaml to a new path inside container
    ports:
      - "7233:7233"
    depends_on:
      - postgres
      - elasticsearch
    networks:
      - temporal-network

  # PostgreSQL for Temporal
  postgres:
    image: postgres:13
    container_name: postgres
    environment:
      - POSTGRES_USER=admin
      - POSTGRES_PASSWORD=admin
      - POSTGRES_DB=temporal
    ports:
      - "5432:5432"
    networks:
      - temporal-network

  # Elasticsearch for Temporal
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.17.8
    container_name: elasticsearch
    environment:
      - discovery.type=single-node
      - ELASTIC_PASSWORD=admin  # Set the password here
    ports:
      - "9200:9200"
    networks:
      - temporal-network

  # Temporal Web UI (versioned)
  temporal-web:
    image: temporalio/ui:0.15.0  # Temporal Web UI (versioned)
    container_name: temporal-web
    environment:
      - TEMPORAL_GRPC_ENDPOINT=temporal:7233  # Connect to Temporal server
    ports:
      - "8088:8088"  # Web UI is available at localhost:8088
    depends_on:
      - temporal
    networks:
      - temporal-network

networks:
  kafka-network:
    driver: bridge
  mongo-network:
    driver: bridge
  redis-network:
    driver: bridge
  temporal-network:
    driver: bridge